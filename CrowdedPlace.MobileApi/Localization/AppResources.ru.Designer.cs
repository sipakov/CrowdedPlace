//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CrowdedPlace.MobileApi.Localization {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class AppResources_ru {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal AppResources_ru() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("CrowdedPlace.MobileApi.Localization.AppResources.ru", typeof(AppResources_ru).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Crowded Place Авторские права (c) 2020
        ///            
        ///*** ЛИЦЕНЗИОННОЕ СОГЛАШЕНИЕ КОНЕЧНОГО ПОЛЬЗОВАТЕЛЯ***
        ///
        ///ВАЖНО: ПРОЧИТАЙТЕ ДАННОЕ СОГЛАШЕНИЕ ВНИМАТЕЛЬНО ПЕРЕД ИСПОЛЬЗОВАНИЕМ Crowded Place.
        ///        
        ///1. ЛИЦЕНЗИОННОЕ СОГЛАШЕНИЕ
        ///Получая, открывая пакет файлов и / или используя Crowded Place (Программное обеспечение), содержащее это программное обеспечение, вы соглашаетесь с тем, что настоящее Лицензионное соглашение с конечным пользователем (EULA) является юридически обязывающим и действующим договором [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string License {
            get {
                return ResourceManager.GetString("License", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Вы не приняли условия лицензии.
        /// </summary>
        internal static string LicenseIsNotAccepted {
            get {
                return ResourceManager.GetString("LicenseIsNotAccepted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Новый митинг.
        /// </summary>
        internal static string NewDemonstrationPush {
            get {
                return ResourceManager.GetString("NewDemonstrationPush", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Новый плакат в вашем митинге.
        /// </summary>
        internal static string NewPosterPush {
            get {
                return ResourceManager.GetString("NewPosterPush", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Вы не можете добавить более одного активного плаката (плакат действителен одну неделю с дня создания).
        /// </summary>
        internal static string PosterConstraint {
            get {
                return ResourceManager.GetString("PosterConstraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Crowded Place Политика конфеденциальности
        ///
        ///1. Crowded Place не запрашивает Ваш адрес электронной почты, телефон или какую нибудь информацию о Вас кроме id устройства. Однако, даже эта информация будет защищена с помощью коммерчески приемлемых средств для предотвращения потери и кражи, а также несанкционированного доступа, разглашения, копирования, использования или изменения.
        ///    
        ///2. Crowded Place не продает контент.
        ///
        ///3. Crowded Place не требует регистрации.
        ///
        ///4. Безопасность Вашей персональной инфор [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PrivacyPolicy {
            get {
                return ResourceManager.GetString("PrivacyPolicy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Жалоба уже была зарегистрирована ранее.
        /// </summary>
        internal static string ReportIsAlreadyAComplaint {
            get {
                return ResourceManager.GetString("ReportIsAlreadyAComplaint", resourceCulture);
            }
        }
    }
}
